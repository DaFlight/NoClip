buildscript {
    repositories {
        jcenter()
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'm2'
            url 'https://plugins.gradle.org/m2'
        }
        maven {
            name 'sponge'
            url 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'gradle.plugin.mnm.mods.kappa:ap-ide:1.0.5'
    }
}
apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'mnm.gradle.ap-ide'

sourceCompatibility = targetCompatibility = "1.8"

minecraft {
    version = "1.12.2"
    runDir = "run"
    mappings = "snapshot_20170919"
    tweakClass = 'me.dags.noclip.launch.NoClipTweaker'
}

group = 'me.dags'
version = "1.2-mc$minecraft.version"

repositories {
    maven {
        name 'sponge'
        url 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        transitive = false
    }
    factory 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
}

processor {
    options.reobfSrgFile = project.tasks.genSrgs.mcpToSrg.path
}

sourceSets {
    main {
        refMap = 'mixin.noclip.refmap.json'
    }
}

mixin {
    defaultObfuscationEnv notch
}

def commonManifest = [
        'Built-By'              : 'ForgeGradle',
        'Implementation-Vendor' : 'dags',
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.version,
        'TweakClass'            : 'me.dags.noclip.launch.NoClipLoaderTweaker',
        'TweakName'             : project.name,
        'TweakVersion'          : project.version,
        'TweakAuthor'           : 'dags'
]

jar {
    classifier 'minimal'
    afterEvaluate {
        manifest {
            attributes commonManifest
        }
    }
}

task allJar(type: Jar) {
    from sourceSets.main.output
    from configurations.compile.collect { zipTree(it) }
    exclude 'META-INF/**'
    exclude 'dummyThing'

    manifest {
        attributes commonManifest
    }
}

artifacts.archives allJar

reobf {
    allJar {}
}